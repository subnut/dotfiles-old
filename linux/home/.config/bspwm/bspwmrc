#! /bin/sh

xinput set-button-map 'TPPS/2 Elan TrackPoint' 1 0 3
xinput set-prop 'SynPS/2 Synaptics TouchPad' 'libinput Accel Speed' 0.001

killall -q sxhkd
sxhkd &> /dev/null &

killall -q /usr/lib/gsd-xsettings
/usr/lib/gsd-xsettings &> /dev/null &

if ! [[ `bspc query --desktops --names` =~ "Desktop" ]]; then for MONITOR in $(bspc query -M --names); do bspc monitor $MONITOR -d I II III IV V VI VII VIII IX T XI XII XIII XIV XV XVI XVII XVIII XIX XX XXI XXII $(for y in $(bspc query -D -m $MONITOR --names | grep temp); do echo -n "$y "; done );done;else for MONITOR in $(bspc query -M --names); do bspc monitor $MONITOR -d I II III IV V VI VII VIII IX T XI XII XIII XIV XV XVI XVII XVIII XIX XX XXI XXI;done; fi

kill $(pgrep --full "this is a comment for my borderer")
zsh -c "while read -r my_auto_something; do if [[ \$my_auto_something =~ 'T@' ]];then bspc config border_width 10;else bspc config border_width 0;fi ;done < <(bspc subscribe); # this is a comment for my borderer" &

#else bspc monitor -d I II III IV V VI VII VIII IX T XI XII XIII XIV XV XVI XVII XVIII XIX XX XXI XXII; fi

bspc config border_width         0
bspc config window_gap          20

bspc config split_ratio          0.50
bspc config borderless_monocle   true
bspc config gapless_monocle      true

bspc config focus_follows_pointer true
bspc config pointer_follows_monitor true
bspc config merge_overlapping_monitors true
bspc config ignore_ewmh_fullscreen true

bspc rule -a Gimp desktop='^8' state=floating follow=on
bspc rule -a Chromium desktop='^2'
bspc rule -a mplayer2 state=floating
bspc rule -a Kupfer.py focus=on
bspc rule -a Screenkey manage=off

bspc rule -a VirtualBoxVM state=floating
bspc rule -a "VirtualBox Machine" state=floating
bspc rule -a jome state=floating
bspc rule -a xdman-Main state=floating
bspc rule -a my_zoom state=floating
bspc rule -a Git-gui--askpass state=floating layer=above
bspc rule -a Yad state=floating layer=above
xsetroot -cursor_name left_ptr &
bspc rule -a '*:*:Picture-in-Picture' state=floating layer=above sticky=on focus=off
bspc rule -a '*:*:Picture-in-picture' state=floating layer=above sticky=on focus=off
bspc rule -a Safeeyes state=floating layer=above fullscreen=false

killall xmousepasteblock
xmousepasteblock &> /dev/null &
# killall clipster
# clipster -d &> /dev/null &
killall clipit
clipit -d &> /dev/null &


# safeeyes -e &> /dev/null &
sh -c "$(which safeeyes) -e &> /dev/null &"

#if [[ $((10#$(date +'%H'))) -gt 5 && $((10#$(date +'%H'))) -lt 18 ]] ; then feh --bg-fill light.png; else feh --bg-fill dark.png; fi
feh --bg-fill light.png  &

killall -q polybar
zsh -c "if ! [[ $(bspc config top_padding) -eq $((`bspc config bottom_padding` + 35)) ]]; then bspc config top_padding $((`bspc config bottom_padding` + 35)); fi &"
# polybar mybar &
zsh <<< "polybar --list-monitors | cut -d':' -f1 | while IFS= read -r MONITOR; do if ! [[ \$MONITOR == \$(polybar --list-monitors | grep primary | cut -d':' -f1) ]]; then MONITOR=\$MONITOR polybar secondary_restack &> /dev/null &; else polybar mybar_restack &> /dev/null &; fi; done &"

zsh <<< 'if [[ $(bluetooth | cut -d"=" -f2 | cut -d" " -f2) =~ on ]] ; then notify-send.sh -u critical "Bluetooth is ON" -i bluetooth -t 0 -a Bluetooth $(if [[ -a bluetooth-on-notification.id ]] ; then echo -n "-r "; cat bluetooth-on-notification.id ; fi) -p > bluetooth-on-notification.id; fi'

zsh <<< 'if grep -q "suspend cause: USER" <(pacmd info); then notify-send.sh -u critical "Sinks are SUPENDED" -i speaker -t 0 -a pulseaudio $(if [[ -a sink-suspend-notification.id ]] ; then echo -n "-r "; cat sink-suspend-notification.id ; fi)  -p > sink-suspend-notification.id ; fi'

if pidof acpid; then true; else zsh <<< "kitty sh -c 'echo \"Starting acpid ...\"; sudo acpid' &"; fi &
if [[ -r /dev/video0 || -r /dev/video1 ]]; then zsh <<< "kitty sh -c 'echo \"Disabling camera ...\"; sudo chmod -r /dev/video*' &"; fi &
# if ! pidof dropbear; then zsh <<< "kitty sh -c 'echo \"Starting acpid ...\"; sudo acpid' &"; fi &

killall -q picom
exec picom &> /dev/null
#exec picom -f --inactive-dim 0.3 --corner-radius 35 --vsync --backend glx --glx-no-stencil --fade-delta 1 --detect-rounded-corners --shadow-opacity=1 --blur-background --blur-method dual_kawase --blur-strength 10 &
#exec picom  --inactive-dim 0.3 --corner-radius 35 --vsync --backend glx --glx-no-stencil --detect-rounded-corners --shadow-opacity=1 --blur-background --blur-method dual_kawase --blur-strength 10 &
